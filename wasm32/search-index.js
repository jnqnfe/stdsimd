var N=null,E="",T="t",U="u",searchIndex={};
var r_ca="std_detect";
var r_aa="core_arch",r_ba="usize";
searchIndex[r_ca]={"doc":"Run-time feature detection for the Rust standard library.","i":[[14,"is_x86_feature_detected",r_ca,"Prevents compilation if `is_x86_feature_detected` is used…",N,N],[14,"is_arm_feature_detected",E,"Prevents compilation if `is_arm_feature_detected` is used…",N,N],[14,"is_aarch64_feature_detected",E,"Prevents compilation if `is_aarch64_feature_detected` is…",N,N],[14,"is_powerpc_feature_detected",E,"Prevents compilation if `is_powerpc_feature_detected` is…",N,N],[14,"is_powerpc64_feature_detected",E,"Prevents compilation if `is_powerpc64_feature_detected` is…",N,N],[14,"is_mips_feature_detected",E,"Prevents compilation if `is_mips_feature_detected` is used…",N,N],[14,"is_mips64_feature_detected",E,"Prevents compilation if `is_mips64_feature_detected` is…",N,N]],"p":[]};
searchIndex[r_aa]={"doc":"Architecture-specific intrinsics.","i":[[0,"arch",r_aa,"SIMD and vendor intrinsics module.",N,N],[0,"wasm32","core_arch::arch","Platform-specific intrinsics for the `wasm32` platform.",N,N],[5,"memory_size","core_arch::arch::wasm32","Corresponding intrinsic to wasm's [`memory.size`…",N,[[["u32"]],[r_ba]]],[5,"memory_grow",E,"Corresponding intrinsic to wasm's [`memory.grow`…",N,[[["u32"],[r_ba]],[r_ba]]],[5,"unreachable",E,"Generates the trap instruction `UNREACHABLE`",N,N]],"p":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);